name: Build, Lint & Publish

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Get and increment version
        id: get_version
        run: |
          $version = Get-Content version.txt -Raw
          $version = $version.Trim()

          if ($version -match '^v(\d+)\.(\d+)(?:\.(\d+))?$') {
            $major = [int]$matches[1]
            $minor = [int]$matches[2]
            $patch = if ($matches[3]) { [int]$matches[3] } else { 0 }

            $patch++
            $newVersion = "v$major.$minor.$patch"
            $newVersion | Out-File -FilePath version.txt -NoNewline -Encoding UTF8
            echo "VERSION=$newVersion" >> $env:GITHUB_OUTPUT
          } else {
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Commit version update
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add version.txt
          if (git diff --staged --quiet) {
            Write-Host "No changes to commit"
          } else {
            git commit -m "Bump version to ${{ steps.get_version.outputs.VERSION }} [skip ci]"
            git push
          }
        shell: pwsh

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
        shell: pwsh
  
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=200 --max-line-length=600 --statistics

      - name: Build executable
        run: |
          echo "__version__ = '${{ steps.get_version.outputs.VERSION }}'" > version.py
          pyinstaller --onefile --clean --add-data "version.py:." --add-data "lib/adjectives.txt:lib" --add-data "lib/nouns.txt:lib" --add-data "lib/verbs.txt:lib" --add-data "lib/NopeCHA:lib/NopeCHA" --add-data "$(python -c "import random_username, os; print(os.path.join(os.path.dirname(random_username.__file__), 'data'))")${{ runner.os == 'Windows' && ';' || ':' }}random_username/data" --name "roblox-auto-signup ${{ steps.get_version.outputs.VERSION }}.exe" main.py

      - name: Upload Executable
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: Roblox Auto Signup ${{ steps.get_version.outputs.VERSION }}
          path: ./dist/roblox-auto-signup ${{ steps.get_version.outputs.VERSION }}.exe
  
      - name: Create a new tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.get_version.outputs.VERSION }}" -m "${{ steps.get_version.outputs.VERSION }}"
          git push origin "${{ steps.get_version.outputs.VERSION }}"

      - name: Publish code
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: create_release
        uses: softprops/action-gh-release@v2.0.4
        with:
          files: |
            ./dist/roblox-auto-signup ${{ steps.get_version.outputs.VERSION }}.exe
          name: "${{ steps.get_version.outputs.VERSION }}"
          body: "Commit: ${{ github.sha }}\nDownload the `roblox-auto-signup.${{ steps.get_version.outputs.VERSION }}.exe` file or the `source code` and you are good to go!"
          tag_name: "${{ steps.get_version.outputs.VERSION }}"